<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define ui unsigned long long
#define test ll t;cin>>t;while(t--)
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define mem(a,x) memset(a,x,sizeof(a))
#define prec(a,n) cout<<fixed<<setprecision(n)<<a
#define sqr(x) ((x)*(x))
#define dbg(x) cout  << #x << ':' << x << endl;
#define pr1(x) cout<<x<<endl
#define pr2(x,y) cout<<x<<" "<<y<<endl
#define f(i,n) for(i=0;i<n;i++)
#define fo(j,k,n) for(j=k;j<n;j++)
void print() 
{ 
    cout <<""<<endl;
} 
  
// Variadic function Template that takes  
// variable number of arguments and prints 
// all of them. 
template <typename T, typename... Types> 
void print(T var1, Types... var2) 
{ 
    cout << var1 <<" "; 
  
    print(var2...) ; 
} 
#define cinarr(a,n) \
    f(i,n)\
    cin>>a[i];
#define printarr(a,n) \
        f(i,n)\
        cout<<a[i]<<" ";\
        cout<<endl;
#define nl cout<<endl;

#define printc(cont,it) \
         for(auto &it : cont)\
         cout<<it.first<<" "<<it.second<<endl;
#define printo(cont,it) \
        for(auto &it : cont)\
        cout<<it<<" ";

typedef vector<ll> vi;
typedef vector<pair<ll , ll> > vii;
typedef queue<ll> qu;
typedef map<ll , ll> mii;
typedef map<string,ll> msi;
typedef map<ll,string> mis;
typedef map<string,char>msc;
typedef stack<ll> st;
typedef pair<ll,ll> pi;
typedef set<ll> SET;
typedef priority_queue<ll> pq;


#define pb push_back
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c)).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())//for set and map /topcoder..
#define cpresent(c,x) (find(all(c),x) != (c).end()) //for vector
#define mp make_pair
#define ff first
#define ss second
#define gcd(a,b) (__gcd(a,b))
#define lcm(a,b) ((a*b)/gcd(a,b))
#define DEBUG

//big data
#define mul(a,b) ((a%MOD)*(b%MOD))%MOD
#define add(a,b) ((a%MOD)+(b%MOD))%MOD

const int mode=1000000007;
const double PI = acos(-1);

int main()
{
    #ifdef DEBUG
	freopen("input.txt","r",stdin);
    #endif 
    fast
    ll i,j,k,x,y,sum=0,cnt=0,flag=0,n,m;
    ${1:}
    
    return 0;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cf</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
